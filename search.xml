<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[System Programming Note]]></title>
    <url>%2F2019%2F10%2F16%2FCS214Note%2F</url>
    <content type="text"><![CDATA[This is a note for my system programming course Cdifference between Java and C&emsp;- java is a interpreted language&emsp;&emsp; javac source.java —&gt; java bytecode(source)&emsp;&emsp; java source —&gt; instructions&emsp;- C is a compiled language&emsp;&emsp; gcc source.c —&gt; instructions&emsp;- Something is in Java but not in C:&emsp;&emsp; String (kinda no, C uses char array to represent string)&emsp;&emsp; boolean&emsp;&emsp; method Basic Data Types:&emsp;int (most often 4 bytes in today’s 32-bit or 64-bit processors. 2 bytes in old 16-bit processor)&emsp;char (1 byte)&emsp;float (4 bytes)&emsp;double (8 bytes)&emsp;short (2 bytes)&emsp;long (8 bytes)&emsp;… Care and use of C code (to avoid errors):&emsp;0. Always return&emsp;1. Always initialize everything C is a memory-oriented language ‘Strings’String in C is basically a null-terminated char array (‘/0’ in the end of the array) 1char string[10] = "a C string"; Type Creation/Aliasingstructcollection of data of different types (collection of data of the same type is an array) struct &lt;name&gt; { |&lt;type0&gt;&lt;name0&gt;|; |&lt;type1&gt;&lt;name1&gt;|; ... }The size of structs depends on the implementation. Compiler may add padding to avoid alignment issues. Hence the size of a struct is greatr than or equal to sum of size of each individual member.Alignment issues: for example, a 32-bit system reads a word, which is 4 bytes, at a time. Lets say we define a struct with a char member followed by an integer, the char would take up the first byte in a word and there are 3 left. As we known an integer is 4 bytes so that it can not be allocated in the same word with the char. Thus, the compiler will add 3 padding bytes after the char, and allocate the integer in the next word. 12345678910//example of building a struct in Cstruct point&#123; int x; int y;&#125;;//initialize a point variablestruct point location = &#123;1, 2&#125;;//accessing members with dot operatorlocation.x = 9;location.y = 10; unionLike struct, but all members share the same memory location (Same data, access as different types) union &lt;name&gt; { |&lt;type0&gt;&lt;name0&gt;|; |&lt;type1&gt;&lt;name1&gt;|; ... }The size of a union is equal to the size of largest member in union enumBuild new types that consist of multiple discrete values 12345enum _boolean &#123;true=1, false=0&#125;;typedef struct _enum boolean; //typedef see next section//now we have boolean//can use like while(true)//actually in C ... 0 is false, anything other than 0 is true typedefRedefine stuff for convenience 1234typedef char* chpoint; //now can use 'chpoint' as 'char*'// the following two lines mean the same thingchar *p = 'a';chpoint p = 'a'; 123456//make structstypedef struct _Node&#123; int data; struct _Node * next;&#125;Node; PointersA variable that does not hold data, but a memory location &amp;A == “get the address of A” *A == “go to the memory address A holds” (dereference)The size of a pointer is 4 or 8 bytes depending on the system deref pointer to struct:123456789struct thingy&#123; int a;&#125;struct thingy stuff=&#123;2&#125;;struct thingy* ptr = &amp;stuff;//either of following dereferences worksptr-&gt;a = 1;(\*ptr).a = 3; Pointer arithmetic:1234char ptr[10];//a and b get the value from same addresschar a = *(ptr+i); //increment by sizeof typechar b = ptr[i]; With const qualifier:const sticks to the name, value could be changed through memory 1234567//a is constant so that any change on value a such a++ is not allowed//but one can change the value of a indirectly through its pointerconst int a = 2;int* hackit = &amp;a;*hackit = *hackit + 1;printf("%d\n",a);//output: 3 more examples: 1234567891011121314151617181920const int a = 2;const int b = 99;int * c = &amp;a;*c=3; //OK//const dataconst int* d = &amp;a;//or int const* b(*d)++; //No Goodd = &amp;b; //OK//const addressint * const e = &amp;a;(*e)++; //OKe = &amp;b; //NG//const data &amp; addressconst int * const f = &amp;a; //int const * const f(*f)++; //NGf = &amp;b; //NG function pointers12345678//point to the beginning of a function//if the function has parameter, put the type of parameter in ()//e.g. int (*funcptr)(char) = ...int (*funcptr)() = somefunction;//invoke a function//int b = somefunction();//invoke a function by pointerint a = funcptr(); pass a function to another function by function pointer 12345int stuff(void* a, void* b, int (*comparator)(void*, void*))&#123; comparator(a,b); return 0;&#125; malloc/freemalloc: dynamic memory allocation. allocates memory from the heap(variables in heap can be accessed globally), returns a pointer to itfree: marks a dynamically allocated pointer as no longer in use 123456789typedef struct _Node&#123; int data; struct _Node * next;&#125;Node;Node * linkedListHead = (Node*)malloc(sizeof(Node));...free(linkedListHead); Things NOT to do with free:&emsp;0- Don’t free twice 123int a = 1free(ptr);free(ptr); &emsp;1- Don’t free statically allocated pointers 1234int a;int * ptr = &amp;a;free(ptr);//if a is assigned in a function(for example main), the address of a is allocated in the function's stack and will be released as soon as the function returns. &emsp;2- Don’t free things that aren’t pointers 12int a;free(a); Definitions &amp; Macrosdefinitions: label assigned to some stuff…direct replacementmacros: definition with parameters. e.g. #define SQUARE(X) (X)*(X) sample code: 1234567891011121314// It works, but is a really bad plan!#define ANUM 2#define ZERO 0==#define SQUARE(x) x*x //to fix that, put parentheses (x)*(x)int main()&#123; int a = ANUM; if(!(ZERO a)) &#123; printf("%d\n",SQUARE(a+3)); //will print 11!...because 2+3*2+3... //subexpression in the pranthesis is not resolved before calling the macro &#125;&#125; User-defined Librariesheader files: (no execute code)&emsp;definitions, macros&emsp;types: enum, typedef, unions, structs…&emsp;prototypes (function declarations) &emsp;header.h: 123456#ifndef _HEADER_H //do not define the same thing twice#define _HEADER_H int addone(int);#endif libraries:&emsp;implementations for prototypes in headers (no main)&emsp;(compiled to .o files) &emsp;header.c: 1234int addone(int arg0)&#123; return arg0+1;&#125; To use user-defined library&emsp;(put #include &quot;header.h&quot; in the beginning of test.c file)&emsp;gcc -c header.c //==&gt; you will get header.o&emsp;gcc test.c header.o // ==&gt; get a.out MakefilesAutomating/Scripting a compilation sequence (a convinent way to compile the whole project) &lt;directive&gt;:&lt;req0&gt;...&lt;reqN&gt; &lt;command&gt; sample makefile: 1234567891011all: main.c library.o gcc main.c library.olibrary.o: library.c gcc -c library.cclean: rm a.out; rm library.otest: ./a.out on command line:$make clean; make; make test Useful Shell Commandsls, cat, wc, diff, less, more, man, grep redirect STDOUT to a file(with overwrite):&emsp;cmd &gt; filename append STDOUT to a file(without overwrite):&emsp;cmd &gt;&gt; filename make STDOUT of one cmd flow to STDIN of another&emsp;cmd | cmd]]></content>
      <tags>
        <tag>System Programming</tag>
        <tag>C</tag>
        <tag>CS214</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Music Theory Note]]></title>
    <url>%2F2019%2F10%2F16%2Fmusic_theory_review%2F</url>
    <content type="text"><![CDATA[This is my Intro to music theory course review note. All the note is based on and all pics in this post are from the textbook Philip Lambert, Principles of Music, 2nd edition, Oxford University Press. A white-key scale(octave): e.g. CDEFGABC(DoReMiFaSolLaSiDo)A chromatic scale includes white keys and black keys within an octave. Accidentals: sharp(♯), flat(♭), natural(♮) - ♯: one half step higher than the natural note - ♭: one half step lower than the natural noteEnharmonics: different names but are the same key, e.g. G♯ is the enharmonic equivalent of A♭ A half step could be either “chromatic” or “diaronic” - chromatic H means two notes are spelled with the same letter - diatonic H means two notes are using different letters - e.g. starting note: D&emsp;&emsp;&nbsp;&nbsp;chromatic H ↑: D♯&emsp;&emsp;&nbsp;&nbsp;diatonic&emsp; H ↑: E♭&emsp;&emsp;&nbsp;&nbsp;chromatic H ↓: D♭&emsp;&emsp;&nbsp;&nbsp;diatonic&emsp; H ↓: C♯ Notes:&emsp;𝅘𝅥𝅯&emsp;&emsp;&emsp;&emsp;𝅘𝅥𝅮&emsp;&emsp;&emsp;𝅘𝅥&emsp;&emsp;&emsp;𝅗𝅥&emsp;&emsp;&emsp;𝅝&emsp;&emsp;sixteenth&emsp;eighth&emsp;quarter&emsp;half&emsp;whole Meter signature: a top number and a bottom number (determines the number of notes allowed in each measure) - bottom: indicates what kind of note (quarter?eighth?…etc) - top: specify how many of those notes in each measure(A.K.A bar) Use beams to group together flagged notes(eighth or smaller) within the same beat Rests:&emsp;𝄿&emsp;&emsp;&emsp;&emsp;𝄾&emsp;&emsp;&emsp;𝄽&emsp;&emsp;&emsp;𝄼&emsp;&emsp;&emsp;𝄻&emsp;&emsp;sixteenth&emsp;eighth&emsp;quarter&emsp;half&emsp;wholeA note or rest followed by a dot(.) means the note/rest plus a half, for example 𝅘𝅥. is equvalent to 𝅘𝅥𝅘𝅥𝅮 A triplet written by putting a “3” over the notes to indicate that 3 notes are fit in where is normally 2. For example, three triplet quavers(eighth notes) are equal in duration to one quarter note, in other words each note in the triplet is 2/3 Treble clef(G clef): 𝄞Bass clef(F clef): 𝄢C clef: 𝄡Staff: 5 horizontal linesLedger line: used to notate pitches above or below the regular musical staff Note that W stands for whole step, and H is half step.Major scale: WWHWWWH (can assume it starts from C)Minor scale: WHWWHWW (can assume it starts from A) Tonic: the first note of a scale, indicating the key. e.g. the tonic of C major is C. To figure out what key the melody is based on, usually just checking the melody’s final note Key signature: determines which notes are to be sharped or flatted. placed between the clef sign and meter signature. - Sequence of writting key signature: FCGDAEB(inverse the order for flat♭) If major key signature is known - for sharp keys: the tonic is one half step above the last sharp - for flat keys: the tonic is the penultimate flat - no trick for F(single ♭) and C(nothing) If minor key signature is known - for sharp keys: the tonic is one whole step below the last sharp - for flat keys: the tonic is two whole step above the last flat Relative minor of a major starts from the sixth scale degree of the major scale. - to find the tonic for a relative minor scale, go to 6th of major - to find the tonic for a relative major scale, go to 3rd of minor NaturalHarmonic: raise half step on 7thMelodic: raise half step on 6th and 7th Parallel major and natural minor have the same tonic]]></content>
      <tags>
        <tag>Music</tag>
        <tag>Music Theory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Basic Coding in Scheme]]></title>
    <url>%2F2019%2F10%2F07%2FScheme_note%2F</url>
    <content type="text"><![CDATA[This is basically a note for the special forms and the built-in functions provided by Scheme library, and some tricks to write program in Scheme. What is SchemeScheme is a functional programming language, a dialect of Lisp. In Scheme, a program is an expression to be evaluated. It repeatedly reads an expression, evaluates it, then prints the answer(result of the evaluation). This progress is known as “Read-eval-print loop”(REPL)An expression could be: a constant: 1, 2.0, “hello, world” a variable with assigned value: a(user-defined e.g.(define a 1)), +(built-in variable, stores the addition procedure) a function application: written as a list(e.g. (+ 1 2)) Special Formsquote;;quote is a special symbol, which does not evaluate but just returns arguments &gt;(quote a) a &gt;(quote (+ 1 2)) (+ 1 2)lambda;;lambda is a special form for user to define a function &gt;(lambda (x) (+ x x)) #&lt;procedure&gt; &gt;((lambda(x) (+ x x)) 1) 2define;;top-level definitions &gt;(define a 1) &gt;a 1 &gt;(define b (+ 1 1)) &gt;b 2 &gt;(define double (lambda(x) (+ x x))) ;;or using the shorthand (define (double x) (+ x x)) &gt;(double 2) 4Booleans;;#f represents false, everything besides #f represents true(usually #t) &gt;(even? 1) #f &gt;(zero? 0) #t &gt;(null? &apos;()) #t &gt;(&gt; 1 2) #f &gt;(not #f);;and,or...similarly #t &gt;(eq? &apos;c &apos;c) #tif;;if(1==0) ;; return 1 + 1 ;;else ;; return 1 - 1 &gt;(if (zero? 1) (+ 1 1) (- 1 1))cond;;if... ;;else if... ;;else if... ;;... ;;else... (define bubbleS (lambda (lst) (cond ((null? lst) &apos;()) ((&lt;= (car lst) (cadr lst)) (cons (car lst) (bubbleS (cdr lst)))) ((&gt; (car lst) (cadr lst)) (cons (cadr lst) (bubbleS (cons (car lst) (cddr lst))))) ) ) )Listscar;;get the first element of a list &gt;(car &apos;(1 2 3)) 1cdr;;get the rest of the list except the first element &gt;(cdr &apos;(1 2 3)) (2 3)c(a|d)+r;;evaluate from right to left.. &gt;(caar &apos;((1 2) 3 4)) ;;equavalent to (car (car ((1 2) 3 4))) 1 &gt;(cadr &apos;((1 2) 3 4)) ;;equavalent to (car (cdr &apos;((1 2) 3 4))) 3 &gt;(cadar &apos;(((4 5) 24 9) (4 18) (1 (99)) 3)) 24cons;;pair a value to a list, place the value to the first position of the list &gt;(cons 1 &apos;(2 3)) (1 2 3) &gt;(cons &apos;(a b) &apos;(c d)) ((a b) c d)assoc;;assoc-list is a datatype that stores symbol-&gt;data ;;assoc function returns the list if the symbol is found ;;or returns #f &gt;(assoc ‘q ‘((b 3 4 5) (q horse cow) (pi 3.14))) (q horse cow) ;;note that assoc is a tail recursive function....append;;append a list in the front of another list &gt;(append &apos;(1) &apos;(2)) (1 2)member;;returns the rest of the list that start from the value if the value is found in the list(top-level) ;;or returns #f &gt;(member 2 &apos;(1 2 3)) (2 3) &gt;(member &apos;(2) &apos;(1 2 3)) #f &gt;(member &apos;(2) &apos;(1 (2) 3)) ((2) 3)let;;a way to bind local variables (let ( (x 1) (y 2) ) (+ x y) ) ;;this is equavalent to ((lambda(x y) (+ x y)) 1 2)let*;;can use the variables right after it is binded ;;if use let instead of let*, error will be given (let* ((f (lambda(x) (+ x x))) (a (f 2))) (f a))letrec;;can use the variables while binding...recursively (letrec ((f (lambda (x) (if (null? x) 0 (+ 1 (f (cdr x))))))) (f &apos;(a b c d)))…apply…map…foldr]]></content>
      <tags>
        <tag>Scheme</tag>
        <tag>Lisp</tag>
        <tag>CS314</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Formalisms for specifying a language]]></title>
    <url>%2F2019%2F10%2F07%2FCS314Note%2F</url>
    <content type="text"><![CDATA[This is a note I took on Principle of Programming Language course instruted by Dr.John-Austen Francisco at Rutgers. All the note is based on insructor’s teaching materials, including the textbook Programming Language Pragmatics (3rd edition) written by Michael L. Scott. Grammars1. definitions: Grammars: codifies semantics and syntax of a language in a set of rules for converting Non-Terminal to Terminal Terminal: defined language symbol(composed of characters in your alphabet) Non-Terminal: a name for a set of terminals(or sequences) that represents some metaphor or concept (not a language symbol) 2. parsing and derivation: derivation: grammar to production parse: production to grammar check lower in parse tree == higher precedence ambiguity and removing ambiguity: precedence, associativity 3. types of grammars: Context Free Grammars(CFGs) specify the overall structure of a programming language only one non-terminal on the left-hand side Regular Grammars(RGs) specify the structure of tokens only one non-terminal on the left-hand side and must derive to something of either the forms: T NT(right-linear), or the forms: NT T(left-linear) i.e. S ==&gt; aSb is disallowed RGs are a subset of CFGs 4. BNF and Extended BNF Backus-Naur Form(BNF) a language for defining the grammar of a language Extended BNF(EBNF) a collection of extensions to BNF {…} repetition(zeor or more times) […] option (…) grouping Regular Expressions Formalism for describing simple PL constructs see exmples and explanations of RE notation Automata Finite State Automaton(FA/FSA) &lt;set of states, labeled transitions, start state, final/accepting state(s)&gt; if, after consuming all characters in a token, you are on an accepting state, the token is in the language decided by this FA Deterministic FAs(DFA) no ε moves at most one transition for any state / input pair Nondeterministic FAs(NFA) ε moves for some state / input, more than one transition RE =&gt; NFA =&gt; DFA =&gt; RE]]></content>
      <tags>
        <tag>CS314</tag>
        <tag>Formal Language</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web Crawling in Python --- Scrapy]]></title>
    <url>%2F2019%2F09%2F09%2FScrapy%2F</url>
    <content type="text"><![CDATA[This summer, I have been working on web crawling frequently. If you are looking for some good tools, I would recommand Python and a framework called Scrapy, which is powerful, fast and easy to start for beginners. This page is an introduction of basic and necessary steps and some tricks that I think might be helpful from my experience of using Scrapy. A detailed guide click here InstallationIf you are using Jetbrains Pycharm like I am, simply click File → Settings → Project Interpreter → + → type Scrapy on the search bar → Install PackageOr find in Installation Guide Start a ProjectIn command line enter: scrapy startproject exampleYou will get a directory: example/ example/ __init__.py items.py middlewares.py pipelines.py settings.py spiders/ __init__.py scrapy.cfgSpidercd example scrapy genspider example example.comThen, you will get a python file under spiders/ folder, where you can write or edit your spidersHere is an example I wrote for getting all China primary schools’ info listed on 51sxue 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# -*- coding: utf-8 -*-import scrapyfrom sxue.items import SxueItem#1st tier citiesallowed_cities = ['北京市', '上海市', '广州市', '深圳市', '成都市', '杭州市', '重庆市', '武汉市', '西安市', '苏州市', '天津市', '南京市', '长沙市', '郑州市', '东莞市', '青岛市', '沈阳市', '宁波市', '昆明市']class SxueXiaoxueSpider(scrapy.Spider): name = 'sxue_xiaoxue' allowed_domains = ['xuexiao.51sxue.com'] start_urls = ['http://xuexiao.51sxue.com/schoolByArea/t_2.html'] base_url = 'http://xuexiao.51sxue.com' def parse(self, response): print("爬取所有省份...") url_list = response.xpath('//*[@id="content"]/div[1]/div[2]/ul[1]/li[2]/ol/a/@href').extract() province_list = response.xpath('//*[@id="content"]/div[1]/div[2]/ul[1]/li[2]/ol/a/text()').extract() for url, province in zip(url_list, province_list): print(province) if province in ['北京市', '天津市', '上海市', '重庆市']: yield scrapy.Request(url=url, callback=self.parse_more, meta=&#123;'city': province&#125;) else: yield scrapy.Request(url=url, callback=self.parse_city, meta=&#123;'province': province&#125;) def parse_city(self, response): print('爬取&#123;&#125;的城市...'.format(response.meta['province'])) url_list = response.xpath('//*[@id="content"]/div[1]/div[2]/ul[2]/li[2]/ol/a/@href').extract() city_list = response.xpath('//*[@id="content"]/div[1]/div[2]/ul[2]/li[2]/ol/a/text()').extract() print(city_list) for url, city in zip(url_list, city_list): if city in allowed_cities: print("选中城市：", city) yield scrapy.Request(url=url, callback=self.parse_more, meta=&#123;'city': city&#125;) def parse_more(self, response): city = response.meta['city'] if city in ['北京市', '天津市', '上海市', '重庆市']: print("******爬取直辖市", city, "*********") print('爬取更多&#123;&#125;的小学...'.format(response.meta['city'])) url = response.xpath('//*[@id="content"]/div[1]/div[7]/a/@href').extract() if url: yield scrapy.Request(url=url[0], callback=self.parse_school, meta=&#123;'city': city, 'more': 1&#125;, dont_filter=True) else: # some city e.g.海口太原 does not have more link yield scrapy.Request(url=response.request.url, callback=self.parse_school, meta=&#123;'city':city, 'more': 0&#125;, dont_filter=True) def parse_school(self, response): print('########爬取&#123;&#125;幼儿园中...'.format(response.meta['city'])) more = response.meta['more'] if more: school_urls = response.xpath('//*[@id="dsadas"]/@href').extract() school_names = response.xpath('//*[@id="dsadas"]/@title').extract() else: school_urls = response.xpath('//*[@id="content"]/div[1]/div[6]/ul/li[2]/ol[1]/dl[1]/a/@href').extract() school_names = response.xpath('//*[@id="content"]/div[1]/div[6]/ul/li[2]/ol[1]/dl[1]/a/@title').extract() print(school_urls) print(school_names) for school_url, school_name in zip(school_urls, school_names): yield scrapy.Request(url=school_url, callback=self.parse_item, meta=&#123;'school_name': school_name&#125;) # get next page next_page_url = response.xpath('//div[@class="school_main"]/div[@class="school_page"]/div[1]/div/a[contains(text(),"下一页")]/@href').extract() if next_page_url: next_url = self.base_url + next_page_url[0] yield scrapy.Request(url=next_url, callback=self.parse_school, meta=&#123;'city': response.meta['city'], 'more': 1&#125;) def parse_item(self, response): print('Hi, this is &#123;&#125;\'s school page!'.format(response.meta['school_name'])) item = SxueItem() item['school_name'] = response.meta['school_name'] item['address'] = response.xpath('//*[@id="address"]/text()').re('[：:](.+)') item['phone'] = response.xpath('//*[@id="phone"]/b/text()').extract() item['weblink'] = response.xpath('//*[@id="webSite"]/text()').extract() yield item Not that: If the program is requesting a link other than allowed_domains, add dont_filter at the end of scrapy.Request() To pass data …. use meta ItemMiddlewareSetting]]></content>
      <tags>
        <tag>Web Crawler</tag>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tutorial & Reference]]></title>
    <url>%2F2019%2F09%2F07%2Ftutorial%2F</url>
    <content type="text"><![CDATA[This is a simple instruction of how I built this blog with all the references. HEXOThis blog is based on the framework Hexo powered by Node.js. It is very powerful with various plugins, themes, and easy to be deployed to GitHub. See detail on Hexo page THEMEThe original theme of this blog is called Ocean. Click here to see on GitHubClick here to see author’s blog page(含中文Theme教程) Tutorial LinksAn easy and quick-to-start way is to follow Hexo Documentation. Youtube video tutorial is provided on this site.If you are looking for a more detailed instruction, I recommend Hexo build bolg tutorial posted nmask’s blog. Other ReferencesHome page video were trimmed from Rutgers Scarlet Knight Hits The Slopes Links:Hexo website: https://hexo.io/Theme(ocean) GitHub: https://github.com/zhwangart/hexo-theme-oceanOfficial Tutorial: https://hexo.io/docs/Recommended Tutorial: https://thief.one/2017/03/03/Hexo%20build%20blog%20tutorial/Home page video Youtube: https://www.youtube.com/watch?v=qGKMQdgzhJI]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Computer Networking Summary1]]></title>
    <url>%2F2019%2F06%2F17%2Fnetworkingsummary1%2F</url>
    <content type="text"><![CDATA[This is a note I took on my Networking course instruted by Dr.Daehan Kwak at Kean. All pictures in this post are from Dr.Kwak’s PowerPoint. This note is based on text book Computer Networking: A Top-Down Approach (7th edition) written by James Kurose and Keith Ross. What is the Internet? Hosts = end systems Communication links fibber, copper, radio, satellite transmission rate: bandwidth(bits/sec) Packet switches routers &amp; switches Internet: Interconnected ISPs Protocols: e.g., TCP, IP, HTTP Internet standards: IETF, RFC Network Structure Network edge hosts: clients and servers Access networks: wired/wireless communication links Digital Subscriber Line(DSL) dedicated Cable network shared Home network Enterprise access network (Ethernet) Wireless access network wireless LANs 802.11 b/g/n(WiFi) wide-area wireless access Cellular: 3G,4G(LTE),5G Physical media guided media: twisted pair copper wire, coaxial cable, fiber optic cable unguided media: radio links Network core packet switching store and forward queuing delay and loss two key function: routing &amp; forwarding circuit switching(telephone networks) FDM &amp; TDM Internet structure ISPs (Internet Service Provider) PoPs(Points of Presence) multi-homing peering IXPs(Internet exchange points) “tier-1” commercial ISPs (e.g. AT&amp;T) — global ISPs Content provider ISPs (e.g. Google) — private network Delay,loss,throughput in networks Delay dnodal = dproc + dqueue + dtrans + dprop dnodal: total nodal delay dproc: nodal processing dqueue: queueing delay dtrans: transmission delay = packet length / link bandwidth dprop: propagation delay = distance of physical link / propagation speed Packet loss: packet arriving to full queue dropped Throughput rate (bits/time unit) at which bits transferred between sender/receiver instantaneous throughput average throughput bottleneck link: min(Rc,Rs) Protocol layers and Encapsulation Application layer — Message Transport layer —– Segment Network layer —— Datagram Link layer ———— Frame Physical layer Network Security Malware virus: self-replicating infection by receiving/executing object (e.g., e-mail attachment) worm: self-replicating infection by passively receiving object that gets itself executed (e.g., vulnerable sw, network) spyware malware infected host can be enrolled in botnet (a network of private computers infected with malware), used for spam or DDoS attacks Attacks Dos, DDoS Packet sniffing IP spoofing]]></content>
      <tags>
        <tag>Network Principles</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Create a new post/draft/page]]></title>
    <url>%2F2019%2F03%2F31%2Fnew-post%2F</url>
    <content type="text"><![CDATA[This is a tutorial about how to create a new post, draft or page on hexoNote that all posts are Markdown files. Click here to learn Markdown syntax. Create a new post:$ hexo new postnameBy default, the Markdown file postname.md created by this command will be under \source\_posts. You can change default create path by editing default_layout in the file _config.yml: # Writing new_post_name: :title.md # File name of new posts default_layout: post # Change it to another page name you have under \source titlecase: false # Transform title into titlecase external_link: true # Open external links in new tabCreate a new draft:$ hexo new draft draftnameIn stead of typing the postname, type out draft followed by draftname to create a new Markdown file called draftname.md under the path \source\_draftsDifferent from the post files, the new draft file just created will not show up on the web. If you want your _drafes folder to show up, you can run a special command with hexo server: #Note that you&apos;ve shut down hexo server $ hexo server --draftTo publish the draft to new post, namely, move the draftname.md file from _drafrs to _post(actually it depends on what is set todefault_layout). Type command: $ hexo publish draftnameCreate a new page:$ hexo new page pagenameHexo allow user to create a new page other than _post the blog post page. Since the new page is not a blog post, it is not going to get rendered on the home page as a blog post. If you want to access it, you need to append /pagename/ directly to your homepage URL Others (to be updated): To change template of post files, edit files under the scaffolds folder Tag Plugins instruction To insert an image on specified position in an article]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
